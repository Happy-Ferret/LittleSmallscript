/*
 * Copyright (c) 2012 Minori Yamashita <ympbyc@gmail.com>
 * See LICENCE.txt
 */
/* 
 * Little Smallscript
 * Little Smalltalk to Javascript translator
 */
(function () {
  'use strict';

  var Packrat, Smallscript, 
  __each = function (obj, fn) {
    for (var key in obj)
      if (obj.hasOwnProperty(key))
        fn(obj[key], key);
    return;
  },
  __template = function (template, hashmap) {
    var dest_str = template;
    __each(hashmap, function (it, key) {
      dest_str = dest_str.replace(new RegExp('%'+key+'%', 'g'), it || "");
    });
    return dest_str;
  };

  try {
    Packrat = require('packratparser').Packrat;
  } catch (err) {
    Packrat = window.Packrat || throw "packrat.js is required";
  }


  Smallscript = (function () {
    var Smallscript;
    
    // smallscript parser's constructor
    Smallscript = function (input) {
      this.cache = {};
      this.input = input;
      this.index = 0;
    };
    Smallscript.prototype = new Packrat("");

    // root parser
    Smallscript.prototype.expr = function () {
      var $wrapper = "(function () { %body% }).call(this);",
          _this = this;
      return this.cacheDo("parse", function () {
        var body = _this.
      });
    };

    // white spaces
    Smallscript.prototype.space = function () {
      var _this = this;
      return this.cacheDo("space", function () { return _this.regex(/[\s\n\t]+/); });
    };

    // a square bracket indicate the start a of block
    Smallscript.prototype.blockStart = function () {
      var _this = this;
      return this.cacheDo("blockStart", function () {return _this.chr("[");});
    };

    // a closing square brackets indicate the end of a block
    Smallscript.prototype.blockEnd = function () {
      var _this = this;
      return this.cacheDo("blockEnd", function () {return _this.chr("]");});
    };

    // variables consist of alpha-numeric charactors (and _, $) only due to javascripts limitation
    Smallscript.prototype.variable = function () {
      var _this = this;
      return this.cacheDo("variable", function () {return _this.regex(/[a-zA-Z_$][a-zA-Z0-9_$]+/);});
    };

    // :
    Smallscript.prototype.colon = function () {
      var _this = this;
      return this.cacheDo("colon", function () {return _this.chr(":");});
    };

    // space-separated variables
    // ignore colons for now
    Smallscript.prototype.variables = function () {
      var _this = this;
      return this.cacheDo("variables", function () {
        vars = "";
        _this.many(function () {
          _this.optional(_this.colon);
          vars += _this.variable() + ", ";
          _this.optional(_this.space);
        });
        return vars.slice(0, -2);
      });
    };

    // colon variables are found in class header and block parameters
    Smallscript.prototype.colonVariable = function () {
      var _this = this;
      return this.cacheDo("colonVariable", function () {
        return _this.sequence(_this.colon, _this.variable);
      });
    };

    // | used in method declaration and in blocks
    Smallscript.prototype.verticalBar = function () {
      var _this = this;
      return this.cacheDo("verticalBar", function () {return _this.chr("|");});
    };

    // consume head section of blocks and return parameter names
    Smallscript.prototype.blockHead = function () {
      var _this = this;
      return this.cacheDo("blockHead", function () {
        return _this.optional(function () {
          var params;
          params = _this.variables();
          _this.verticalBar();
          return params;
        });
      });
    };

    // body of blocks
    // expressions are delimeted with . 
    // the last expression should return
    Smallscript.prototype.blockBody = function () {
      var _this = this;
      return this.cacheDo("body", function () {
        return _this.many(function () {
          return _this.notFollowedBy(_this.blockEnd) === null ? _this.anyChar() : null;
        })
      });
    };

    return Smallscript;
  })();
  
  if ( ! exports) var exports = window;
  exports.Smallscript = Smallscript;
  
}).call(this);
